package com.gerberdshild.javalanguage.multithreaded_programming.part_10;

//Пример взаимной блокировки.
//1. Создаются экземпляры класса A и В.
//2. Создается и отправляется на запуск Соперничающий поток.
//3. В "Главном потоке" вызывается метод A.first(b)  //3. Параллельно запсукается в "Соперничающем потоке" метод  B.first(a)
//4. "Главный поток" занимает монитор класса A и засыпает sleep(1000) //4. "Соперничающий поток" занимает монитор класса В и засыпает sleep(1000)
//5. "Главный поток" просыпается и пытается запстить метод second() из класса B, однако его монитор занят "Соперничащим потоком", поэтому "Главный поток" отправляется  в Block-Set
//5. "Соперничающий поток" просыпается и пытается запстить метод second() из класса A, однако его монитор занят "Главныс потоком", поэтому "Соперничающий поток" отправляется  в Block-Set
//6. Оба потока находятся в взаимной блокировке.

public class Deadlock implements Runnable {
    A a;
    B b;

    Deadlock() {
        a = new A();
        b = new B();
        Thread.currentThread().setName("Главный поток.");
        Thread thread = new Thread(this, "Соперничающий поток.");
        thread.start();
        a.first(b);
        System.out.println("Эту строку [Главный поток] уже не выведет.");
    }

    public void run() {
        b.first(a);
        System.out.println("Эту строку [Соперничающий] поток уже не выведет.");
    }

    public static void main(String[] args) {
        new Deadlock();
    }
}
